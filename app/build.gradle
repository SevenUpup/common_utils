plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp'
}

android {
    namespace 'com.fido.common.common_utils'
    compileSdk versions.compileSdk

    defaultConfig {
        applicationId "com.fido.common.common_utils"
        minSdk versions.minSdk
        targetSdk versions.targetSdk

        versionCode 1
        versionName "0.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        release {
            storeFile file("../common_utils.jks")
            storePassword "123456"
            keyAlias "FiDo"
            keyPassword "123456"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            //Zipalign
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true

            signingConfig signingConfigs.release

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
        freeCompilerArgs += [
                "-Xjvm-default=all",
        ]
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    /*// 导入时去除重复库
    configurations {
        all {
            exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
        }
    }*/

    implementation deps.android.kt_ktx
    implementation deps.android.recyclerview
    implementation deps.android.appcompat
    implementation deps.android.material
    implementation deps.android.constraint_layout
    implementation deps.android.viewmodel_ktx

    implementation (deps.android.lifecycle_ktx){
        exclude group: 'androidx.core'
    }

    implementation deps.support.retrofit2
    implementation deps.support.retrofit_gson

    implementation project(':common_base_util')
    implementation project(':common_base_ui')
    implementation project(':easy_navigation')

    //lottie
    implementation "com.airbnb.android:lottie:3.0.3-support"

    implementation 'com.github.liangjingkanji:debugkit:1.3.0'

    //crashwoodpecker
    implementation 'me.drakeet.library:crashwoodpecker:2.1.1'

    // 依赖androidx, 已升级AndroidX的项目集成下面的依赖
    implementation "com.bytedance.tools.codelocator:codelocator-core:2.0.0"
    // 分别依赖对应的lancet模块, 包含相对应的跳转能力
    debugImplementation "com.bytedance.tools.codelocator:codelocator-lancet-xml:2.0.0"
    debugImplementation "com.bytedance.tools.codelocator:codelocator-lancet-activity:2.0.0"
    debugImplementation "com.bytedance.tools.codelocator:codelocator-lancet-view:2.0.0"
    debugImplementation "com.bytedance.tools.codelocator:codelocator-lancet-toast:2.0.0"
    debugImplementation "com.bytedance.tools.codelocator:codelocator-lancet-dialog:2.0.0"
    debugImplementation "com.bytedance.tools.codelocator:codelocator-lancet-popup:2.0.0"

    //Stetho Chrome调试  chrome://inspect/#devices
    //        注册 Stetho inspector
    //        Stetho.initializeWithDefaults(this)
    implementation 'com.facebook.stetho:stetho:1.6.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.6.0'
    //kotlin反射
//    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.31"

    implementation deps.android.room_ktx
    //需添加 apply plugin: 'kotlin-kapt'
    kapt deps.android.room_compiler

//    implementation "com.github.SevenUpup.annotation:annotation:0.0.13"
//    ksp('com.github.SevenUpup.annotation:compiler:0.0.13')
}

/**
 * 统一依赖用
 */
configurations.all {
    /**
     * 如果你想对版本冲突的依赖项做版本管理，但是又不知道当前项目中有哪些依赖是重复的，从External Libraries里面一个一个的看又太费劲。
     * 那么，我告诉你一个小技巧，开启版本冲突报错模式：
     */
//    resolutionStrategy{
//        failOnVersionConflict()
//    }

    // ...
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'androidx.databinding' && requested.name == 'viewbinding') {
            details.useVersion '7.4.0-alpha10'
        }
        if (requested.group == 'androidx.databinding' && requested.name == 'databinding-runtime') {
            details.useVersion '7.4.0-alpha10'
        }
        if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-stdlib-jdk8') {
            details.useVersion '1.7.10'
        }
        if (requested.group == 'com.google.android.material' && requested.name == 'material') {
            details.useVersion '1.5.0'
        }
        if (requested.group == 'androidx.lifecycle' && requested.name == 'lifecycle-viewmodel-ktx') {
            details.useVersion '2.4.1'
        }
        if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-stdlib') {
            details.useVersion '1.7.10'
        }
        if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-stdlib-jdk7') {
            details.useVersion '1.7.10'
        }
        if (requested.group == 'androidx.fragment' && requested.name == 'fragment') {
            details.useVersion '1.3.6'
        }
        if (requested.group == 'androidx.drawerlayout' && requested.name == 'drawerlayout') {
            details.useVersion '1.1.1'
        }
        if (requested.group == 'androidx.vectordrawable' && requested.name == 'vectordrawable') {
            details.useVersion '1.1.0'
        }
        if (requested.group == 'androidx.lifecycle' && requested.name == 'lifecycle-livedata') {
            details.useVersion '2.4.1'
        }
    }
}


// ======================= Test Gradle ========================
// 自定义Gradle任务，用于计算APK中的图片数量
task countImagesInApk(type: GradleBuild) {
    dependsOn('assembleDebug')

    doLast {
        def drawableResDir = file('src/main/res/drawable')
        def imageFiles = drawableResDir.listFiles() as File[]
        def imageCount = imageFiles.size()

        println "Image count in APK: $imageCount"
    }
}
